---
import Img from "./Img.astro";
import Icon from "./Icon";
const { class: className, ...props } = Astro.props;

const carousel_imgs = [
    {
        src: "https://picsum.photos/500/300",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/1080/720",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/200/200",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/400/300",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/350/350",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/200/200",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/200/200",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/400/300",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/350/350",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/200/200",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/200/200",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/400/300",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/350/350",
        alt: "A picsum image",
    },
    {
        src: "https://picsum.photos/200/200",
        alt: "A picsum image",
    },
];
const displayPerRow = 3;
const imgGroups = carousel_imgs.reduce((group, item, index) => {
    const groupIndex = Math.floor(index / displayPerRow);
    if (!group[groupIndex]) group[groupIndex] = []; // create a new group
    group[groupIndex].push(item);
    return group;
}, []);

---
<section class={`${className} carousel`} {...props} lazy-animation>
    {imgGroups.map((group, glb_idx) => (
        <div class="carousel__group" data-show={!glb_idx} data-show-next={glb_idx === 1}>
            {group.map((img: { src: string; alt: string }, item_idx: number) => {
                const index = glb_idx * displayPerRow + item_idx + 1;
                // for styling img
                const clsName = index % 2 === 0 ? 
                    (index % 4 === 0 ? "carousel__img4n" : "carousel__img2n") : 
                    (index % 3 === 0 ? "carousel__img3n" : "carousel__img1n");
                return (
                    <div class={`${clsName} img_wrapper`}>
                        <Img src={img.src} alt={img.alt} />
                    </div>
                );
            })}
        </div>
    ))}
    <Icon id="ps_next_img" src="/icon/ArrowRightIcon.svg" client:load/>
</section>

<script>
    const groups = document.getElementsByClassName("carousel__group");
    const nextBt = document.getElementById("ps_next_img");
    let currentIdx = 0;
    let lastIdx = null;
    
    const nextGroup = () => {
        if (lastIdx !== null)
            groups[lastIdx].removeAttribute("data-show-prev");
        lastIdx = currentIdx;
        currentIdx = (currentIdx + 1) % groups.length;
        const nextIdx = (currentIdx + 1) % groups.length;
        groups[lastIdx].removeAttribute("data-show");
        groups[currentIdx].removeAttribute("data-show-next");
        groups[lastIdx].setAttribute("data-show-prev", "");
        groups[currentIdx].setAttribute("data-show", "");
        groups[nextIdx].setAttribute("data-show-next", "");
    }
    nextBt.addEventListener("click", nextGroup);
</script>

<style>
    section {
        position: relative;
    }
    .img_wrapper {
        flex: 1 0;
        border-radius: var(--ps-img-s);
        overflow: hidden;
    }
    .img {
        min-width: var(--ps-img-s);
        max-width: calc(var(--ps-img-s) * 5);
        height: 100%;
        transition: transform 0.3s ease-in-out;
    }
    section[lazy-animation] .img {
        transform: scale(120%) translate(0, 10%);
    }
    .carousel {
        --ps-img-s: calc(var(--radius-normal) * 4);
        --ps-img-gap: 1rem;
        position: relative;
        height: var(--ps-img-s);
    }
    .carousel__group {
        flex: 1 0 100%;
        position: absolute;
        inset: 0;
        display: none;
        transition: all 1s ease-in-out;
    }
    .carousel__group[data-show-prev],
    .carousel__group[data-show], 
    .carousel__group[data-show-next] {
        display: flex;
        gap: var(--ps-img-gap);
    }
    .carousel__group[data-show-prev] {
        order: 1;
        transform: translateX(calc(-100% - var(--padding-lr)));
    }
    .carousel__group[data-show] {
        order: 2;
        transform: translateX(0%);
    } 
    .carousel__group[data-show-next] {
        order: 3;
        transform: translateX(calc(100% + var(--padding-lr)));
    }
    .carousel__img1n {
        flex-basis: 30%;
    }
    .carousel__img2n {
        flex-basis: 50%;
    }
    .carousel__img3n {
        flex-basis: 15%;
    }
    .carousel__img4n {
        flex-basis: 15%;
    }
    @media only screen and (max-width: 1023px) {
        .carousel__img1n {
            flex-basis: 15%;
        }
        .carousel__img2n {
            flex-basis: 30%;
        }
    }
</style>

<style is:global>
    #ps_next_img {
        position: absolute;
        top: 50%;
        right: 0%;
        transform: translate(50%, -50%);
        background-color: var(--color-overlay);
        backdrop-filter: blur(10px);
        font-size: var(--fontsize-normal);
        line-height: 70%;
        padding: clamp(0.4rem, 1vw, 0.5rem) clamp(1rem, 2vw, 1.5rem);
        border-radius: var(--radius-normal);
        overflow: hidden;
        cursor: pointer;
    }
</style>